name: Publish application

on:
  workflow_dispatch:
    inputs:
      api_image_tag:
        description: Docker image tag to use for the API (leave empty to use the commit SHA)
        required: false
        default: ""
        type: string
      worker_image_tag:
        description: Docker image tag to use for the worker (leave empty to use the commit SHA)
        required: false
        default: ""
        type: string
      config_path:
        description: Optional path (relative to repo root) to the JSON config for secrets/app settings
        required: false
        default: "infra/scripts/deployment-settings.json"
        type: string

env:
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
  API_IMAGE_TAG: ${{ inputs.api_image_tag != '' && inputs.api_image_tag || github.sha }}
  WORKER_IMAGE_TAG: ${{ inputs.worker_image_tag != '' && inputs.worker_image_tag || github.sha }}

jobs:
  publish:
    name: Build and publish application
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write deployment config from secret
        shell: bash
        run: |
          if [ -n "${{ secrets.DEPLOYMENT_CONFIG }}" ]; then
            mkdir -p infra/scripts
            echo "${{ secrets.DEPLOYMENT_CONFIG }}" > infra/scripts/deployment-settings.json
          fi

      - name: Sign in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Select subscription
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "$SUBSCRIPTION_ID"

      - name: Capture latest deployment outputs
        id: deployment
        shell: bash
        run: |
          set -euo pipefail

          deployment_json=$(az deployment group list \
            --resource-group "$RESOURCE_GROUP" \
            --query "max_by([?properties.provisioningState=='Succeeded'], &properties.timestamp).properties" \
            -o json)

          if [ -z "$deployment_json" ] || [ "$deployment_json" = "null" ]; then
            echo "No successful deployments found in resource group $RESOURCE_GROUP" >&2
            exit 1
          fi

          outputs=$(echo "$deployment_json" | jq -r '.outputs')
          if [ -z "$outputs" ] || [ "$outputs" = "null" ]; then
            echo "Deployment did not return outputs. Ensure infra/scripts/deploy-infrastructure.ps1 was run." >&2
            exit 1
          fi

          mkdir -p infra/scripts
          echo "$outputs" | jq '.' > infra/scripts/latest-deployment.json

          acr_name=$(echo "$outputs" | jq -r '.containerRegistryName.value')
          acr_login_server=$(echo "$outputs" | jq -r '.containerRegistryLoginServer.value')
          api_app_name=$(echo "$outputs" | jq -r '.apiContainerAppName.value')
          job_name=$(echo "$outputs" | jq -r '.queueWorkerJobName.value')
          function_app_name=$(echo "$outputs" | jq -r '.functionAppName.value')

          required=0
          for value in "$acr_name" "$acr_login_server" "$api_app_name" "$job_name" "$function_app_name"; do
            if [ "$value" = "null" ] || [ -z "$value" ]; then
              required=1
            fi
          done

          if [ "$required" -ne 0 ]; then
            echo "Missing expected outputs in deployment metadata. Check the Bicep outputs." >&2
            cat infra/scripts/latest-deployment.json
            exit 1
          fi

          echo "acr_name=$acr_name" >> "$GITHUB_OUTPUT"
          echo "acr_login_server=$acr_login_server" >> "$GITHUB_OUTPUT"
          echo "api_app_name=$api_app_name" >> "$GITHUB_OUTPUT"
          echo "job_name=$job_name" >> "$GITHUB_OUTPUT"
          echo "function_app_name=$function_app_name" >> "$GITHUB_OUTPUT"

      - name: Ensure ACR login
        shell: bash
        run: |
          set -euo pipefail

          ACR_NAME="${{ steps.deployment.outputs.acr_name }}"
          ACR_LOGIN_SERVER="${{ steps.deployment.outputs.acr_login_server }}"

          echo "Checking ACR login for $ACR_NAME ($ACR_LOGIN_SERVER)"

          # Try standard az acr login first (this will configure docker login on runners with docker)
          if az acr login --name "$ACR_NAME" 2>/tmp/azacr.err; then
            echo "az acr login succeeded"
            exit 0
          fi

          echo "az acr login failed. Showing az error output:" >&2
          sed -n '1,200p' /tmp/azacr.err || true

          # Fallback: try token-based docker login (useable when az acr login doesn't configure docker)
          echo "Attempting token-based docker login as fallback..."
          token=$(az acr login -n "$ACR_NAME" --expose-token -o tsv --query accessToken 2>/dev/null || true)
          if [ -n "$token" ]; then
            echo "$token" | docker login "$ACR_LOGIN_SERVER" -u 00000000-0000-0000-0000-000000000000 --password-stdin
            echo "docker login (token) succeeded"
          else
            echo "Failed to obtain ACR token. Check that AZURE_CREDENTIALS repo secret is present and contains a valid clientSecret, and that the service principal has AcrPush on the registry." >&2
            exit 1
          fi

      - name: Publish application via PowerShell script
        shell: pwsh
        env:
          CONFIG_PATH: ${{ inputs.config_path }}
        run: |
          $ErrorActionPreference = 'Stop'
          $params = @{
            SubscriptionId     = "$env:SUBSCRIPTION_ID"
            ResourceGroupName  = "$env:RESOURCE_GROUP"
            DeploymentInfoPath = "infra/scripts/latest-deployment.json"
            ApiImageTag        = "$env:API_IMAGE_TAG"
            WorkerImageTag     = "$env:WORKER_IMAGE_TAG"
          }

          if (-not [string]::IsNullOrWhiteSpace($env:CONFIG_PATH)) {
            $params.ConfigPath = $env:CONFIG_PATH
          }

          Write-Host "Invoking infra/scripts/publish-app.ps1 with tags API=$($params.ApiImageTag) and Worker=$($params.WorkerImageTag)" -ForegroundColor Cyan
          & "infra/scripts/publish-app.ps1" @params
